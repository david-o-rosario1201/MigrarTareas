@page "/DeletePrioridades"
@page "/DeletePrioridades/prioridadId={prioridadId:int}"
@inject NavigationManager navigation
@inject HttpClient httpClient

<PageTitle>Eliminar Prioridad</PageTitle>
<div class="container">
	<div class="card shadow-lg">
		@*Header*@
		<div class="card-header">
			<h3><strong>Eliminar Prioridad</strong></h3>
		</div>
		@*Body*@
		<div class="card-body col-5">
			<h4><strong>¿Est&aacute;s seguro de que quieres eliminar esta prioridad?</strong></h4>
			@*Datos*@
			<ul>
				<li><strong>PrioridadId:</strong> @prioridad.PrioridadId</li>
				<li><strong>Descripci&oacute;n:</strong> @prioridad.Descripcion</li>
				<li><strong>D&iacute;asCompromiso:</strong> @prioridad.DiasCompromiso</li>
			</ul>
		</div>
		<div class="card-footer d-flex justify-content-center">
			<div class="px-2">
				<button type="button" class="btn btn-outline-dark" @onclick="Volver"><i class="bi bi-box-arrow-left" /> Cancelar</button>
			</div>
			<button type="button" class="btn btn-outline-danger" @onclick="Eliminar"><i class="bi bi-trash3-fill" /> Eliminar</button>
		</div>
		@*Mensaje*@
		@mensaje
	</div>
</div>

@code {
	[Parameter]
	public int prioridadId { get; set; }
	public Prioridades prioridad { get; set; } = new Prioridades();
	public string mensaje { get; set; } = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		await Task.Delay(500);

		prioridad = await httpClient.GetFromJsonAsync<Prioridades>($"api/Prioridades/{prioridadId}");
	}

	public async Task Eliminar()
	{
		var response = await httpClient.DeleteAsync($"api/Prioridades/{prioridadId}");
		if (response.IsSuccessStatusCode)
		{
			mensaje = "La prioridad ha sido eliminada con éxito";
			StateHasChanged();
			await Task.Delay(2000);
			Volver();
		}
		else
			mensaje = "No se ha podido eliminar la prioridad correctamente";

		StateHasChanged();
	}

	void Volver()
	{
		navigation.NavigateTo("/Prioridades");
	}
}