@page "/EditSistemas"
@page "/EditSistemas/sistemaId={sistemaId:int}"
@inject NavigationManager navigation
@inject HttpClient httpClient

<PageTitle>Editar Sistema</PageTitle>
<EditForm Model="sistema" OnValidSubmit="Modificar">
    <DataAnnotationsValidator />
    <div class="container">
        <did class="card shadow-lg">
            @*Header*@
            <div class="card-header">
                <h3><strong>Editar Sistema</strong></h3>
            </div>
            @*Body*@
            <div class="card-body">
                <div class="row mb-3">
                    @*Id*@
                    <div class="col-4">
                        <label class="form-label" for="sistemaid"><strong>SistemaId:</strong></label>
                        <InputNumber id="sistemaid" class="form-control" @bind-Value="sistema.SistemaId"></InputNumber>
                    </div>
                    @*Nombre*@
                    <div class="col-4">
                        <label class="form-label" for="nombre"><strong>Nombre:</strong></label>
                        <InputText id="nombre" class="form-control" @bind-Value="sistema.Nombre" placeholder="Escriba un nombre para el sistema"></InputText>
                        <ValidationMessage For="@(() => sistema.Nombre)"></ValidationMessage>
                    </div>
                </div>
            </div>
            @*Boton*@
            <div class="card-footer d-flex justify-content-center">
                <div class="px-2">
                    <button type="button" class="btn btn-outline-primary" @onclick="Volver"><i class="bi bi-box-arrow-left"/> Volver</button>
                </div>
                <button type="submit" class="btn btn-outline-success"><i class="bi bi-floppy-fill" /> Modificar</button>
            </div>
        </did>
    </div>
</EditForm>
@mensaje

@code {
    [Parameter]
    public int sistemaId { get; set; }
    public Sistemas sistema { get; set; } = new Sistemas();
    public string mensaje { get; set; } = string.Empty;
    public string nombreLast { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(500);

        sistema = await httpClient.GetFromJsonAsync<Sistemas>($"api/Sistemas/{sistemaId}");
        nombreLast = sistema.Nombre;
    }

    public async Task Modificar()
    {
        if (!await Validar())
            mensaje = "Error, ya existe un sistema con este nombre";
        else
        {
            var response = await httpClient.PutAsJsonAsync($"api/Sistemas/{sistemaId}",sistema);
            if (response.IsSuccessStatusCode)
            {
                mensaje = "Los datos se han modificado con éxito";
                StateHasChanged();
                await Task.Delay(2000);
                Volver();
            }
            else
                mensaje = "Error, los datos no se han podido modificar correctamente";
        }

        StateHasChanged();
    }

    public async Task<bool> Validar()
    {
        var sistemaList = await httpClient.GetFromJsonAsync<List<Sistemas>>("api/Sistemas");
        var nombre = sistemaList.Where(s => s.Nombre == sistema.Nombre);

        if (nombre.Any() && sistema.Nombre != nombreLast)
            return false;

        return true;
    }

    void Volver()
    {
        navigation.NavigateTo("/Sistemas");
    }
}